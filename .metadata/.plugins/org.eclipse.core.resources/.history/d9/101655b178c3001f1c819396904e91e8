package com.nit.model;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Set;

import org.springframework.stereotype.Component;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.PrePersist;
import jakarta.persistence.SequenceGenerator;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Component
@Entity
@Getter
@Setter
@NoArgsConstructor
@ToString
public class ApplicantRegister implements Serializable{

	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "my_seq_gen")
	@SequenceGenerator(name = "my_seq_gen", sequenceName = "my_sequence", allocationSize = 1)
	private Integer id;
	@Column(nullable = false, unique = true) // Ensures database-level uniqueness
	private String userId;
	private String password;
	private String email;
	private String connectionType;
	@Column(nullable = false, unique = true)
	 private Long mobile;
	   @Column(nullable = false, updatable = false) // The date is not updated after creation
	    private LocalDateTime createdDate;

	    @PrePersist
	    protected void onCreate() {
	        this.createdDate = LocalDateTime.now(); // Sets the current date and time
	    }
	    @ManyToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
	    @JoinTable(name = "user_roles",
	               joinColumns = @JoinColumn(name = "user_id"),
	               inverseJoinColumns = @JoinColumn(name = "role_id"))
	    private Set<Role> roles;
	 
}
